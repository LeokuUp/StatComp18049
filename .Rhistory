library(devtools)
document()
load_all()
x1<-sample(1:10,1000,replace = T)
x2<-sample(10:20,1000,replace = T)
chisq.test(x1,x2)
build()
install.packages(package='Rtools')
install.packages('Rtools')
install.packages('Rtools')
help(StatComp18049)
help(package='StatComp18049')
help('StatComp18049')
help(PSTR)
library(PSTR)
help(PSTR)
library(StatComp18049)
help(StatComp18049)
simple_chitest
library(StatComp18049)
install.packages(Rtools)
install.packages('Rtools')
document()
library(StatComp18049)
help(StatComp18049)
StatComp18049
help(package='StatComp18049')
document()
x1<-sample(1:10,1000,replace = T)
x2<-sample(10:20,1000,replace = T)
chisq.test(x1,x2)
simple_chitest
simple_table
library('devtools')
document()
document()
load_all()
x1<-sample(1:10,1000,replace = T)
x2<-sample(10:20,1000,replace = T)
chisq.test(x1,x2)
library(StatComp18049)
help('StatComp18049')
help(package='StatComp18049')
library(PSTR)
help(PSTR)
NewPSTR
help(PSTR)
LinTest
WCB_LinTest
EstPSTR
optim
document
document()
document()
library(StatComp18049)
help(package='StatComp18049')
GEST(distribution='lognormal',m=1e3,n=1e3)
document()
document()
document()
help(package="StatComp18049")
help(package="StatComp18049")
library("devtools")
document()
document()
library(StatComp18049)
help("StatComp18049")
help(package="StatComp18049")
G_EST()
document()
library(StatComp18049)
help(package='StatComp18049')
build_vignettes()
build_vignettes()
G_EST <- function(distribution='lognormal',m=1e3,n=1e3){
g.hat <-  numeric(m)
for(i in 1:m){
x <- Random_Generation(distribution=distribution,n=n)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F, main = "standard lognormal" )
g.est <- mean(g.hat)
g.est
}
document()
library(StatComp18049)
help(package='StatComp18049')
GEST()
install_github("zhengdat/StatComp18049")
install_github("zhengdat/StatComp18049")
document()
library(StatComp18049)
help(package='StatComp18049')
document()
library(StatComp18049)
help(package='StatComp18049')
help(PSTR)
library(PSTR)
help(PSTR)
document()
library(StatComp18049)
help(package='StatComp18049')
generateBeta <- function(n,a,b){
mx=(1-a)/(2-a-b)
#max
max=mx^(a-1)*(1-mx)^(b-1)/beta(a,b)
c=max+1
j<-k<-0; y <- numeric(n)
while (k < n) {
u <- runif(1)
j <- j + 1
x <- runif(1) #random variate from g
if (x^(a-1)*(1-x)^(b-1)/beta(a,b) > c*u) {
#we accept x
k <- k + 1
y[k] <- x
}
}
return(y)
}
#ִ?к???
y<-generateBeta(1000,3,2)
hist(y,prob = TRUE,ylim=c(0,2))
x <- seq(0, 1, .01)
#??????????
lines(x, x^2*(1-x)^1/beta(3,2))
document
document()
library(StatComp18049)
help(package="StatComp18049")
m <- 1e3; n <- 1e3; set.seed(123)
##X is standard lognormal
g.hat <-  numeric(m)
for(i in 1:m){
x <- rlnorm(n)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F, main = "standard lognormal" )
g.est <- mean(g.hat)
g.est
##X is uniform distribution
g.hat <-  numeric(m)
for(i in 1:m){
x <- runif(n)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F, main = "uniform distribution")
g.est <- mean(g.hat)
g.est
##X is Bernoulli(0,1) distribution
g.hat <-  numeric(m)
for(i in 1:m){
x <- rbinom(n,size=1,prob = 0.1)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F,main = "Bernoulli(0,1)")
g.est <- mean(g.hat)
g.est
m <- 1e3; n <- 1e3; set.seed(123)
##X is standard lognormal
g.hat <-  numeric(m)
for(i in 1:m){
x <- rlnorm(n)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F, main = "standard lognormal" )
g.est <- mean(g.hat)
g.est
##X is uniform distribution
g.hat <-  numeric(m)
for(i in 1:m){
x <- runif(n)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F, main = "uniform distribution")
g.est <- mean(g.hat)
g.est
##X is Bernoulli(0,1) distribution
g.hat <-  numeric(m)
for(i in 1:m){
x <- rbinom(n,size=1,prob = 0.1)
xorder <- sort(x)
for(j in 1:n){
g.hat[i] <- g.hat[i] + (2*j-n-1)*xorder[j]
}
g.hat[i] <- g.hat[i]/(n*n*mean(xorder))
}
hist(g.hat,freq = F,main = "Bernoulli(0,1)")
g.est <- mean(g.hat)
g.est
X <- matrix(5:8, 2)
rownames(X) <- c("a", "b")
colnames(X) <- c("c", "d")
print("打印矩阵X")
X
Y <- matrix(1:4, 2)
rownames(Y) <- c("e", "f")
colnames(Y) <- c("g", "h")
print("打印矩阵Y")
Y
print("行合并")
cbind(X, Y)
print("列合并")
rbind(X, Y)
print("矩阵转置")
t(X)
X <- matrix(5:8, 2)
rownames(X) <- c("a", "b")
colnames(X) <- c("c", "d")
X
Y <- matrix(1:4, 2)
rownames(Y) <- c("e", "f")
colnames(Y) <- c("g", "h")
Y
cbind(X, Y)
rbind(X, Y)
t(X)
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31,40)
opar <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
par(lwd=2, cex=1.5)
par(cex.axis=0.75, font.axis=3)
plot(dose, drugA, type="b", pch=19, lty=2, col="red")
plot(dose, drugA, type="b", pch=23, lty=6, col="blue", bg="green")
par(opar)
myfun <- function(S,C1, C2) {
mfrow=c(1,1)
plot(C1, C2, type="l")
title(S)
}
c1<-c(1:10)
c2<-c(11:20)
s<-"图1"
myfun(s,c1,c2)
myfun <- function(S,C1, C2) {
mfrow=c(1,1)
plot(C1, C2, type="l")
title(S)
}
c1<-c(1:10)
c2<-c(11:20)
s<-"Graph1"
myfun(s,c1,c2)
set.seed(12345)
x<-sample(0:4, size = 1000, replace = TRUE,prob = c(0.1,0.2,0.2,0.2,0.3))
y=table(x)
y
z<-y/1000
z
generateBeta <- function(n,a,b){
mx=(1-a)/(2-a-b)
max=mx^(a-1)*(1-mx)^(b-1)/beta(a,b)
c=max+1
j<-k<-0; y <- numeric(n)
while (k < n) {
u <- runif(1)
j <- j + 1
x <- runif(1) #random variate from g
if (x^(a-1)*(1-x)^(b-1)/beta(a,b) > c*u) {
#we accept x
k <- k + 1
y[k] <- x
}
}
return(y)
}
#example
y<-generateBeta(1000,3,2)
hist(y,prob = TRUE,ylim=c(0,2))
x <- seq(0, 1, .01)
#lines
lines(x, x^2*(1-x)^1/beta(3,2))
set.seed(12345)
n <- 1e3; r <- 4; beta <- 2
#lambda
lambda <- rgamma(n, r, beta)
x<-rexp(n,lambda)
hist(x,breaks = 50)
mypbeta<-function(a,b,x){
m=20000
u=runif(m/2,min=0,max=x)
u1=1-u
g=1/beta(a,b)*u^(a-1)*(1-u)^(b-1)*x
g1=1/beta(a,b)*u1^(a-1)*(1-u1)^(b-1)*x
theta=(mean(g)+mean(g1))/2
sd=sd(c(g,g1))/m
return(list("theta"=theta,"sd"=sd))
}
x=seq(0.1,0.9,by=0.1)
MC=numeric(9)
sd=numeric(9)
for(i in 1:9){
result=mypbeta(3,3,x[i])
MC[i]=result[[1]]
sd[i]=result[[2]]
}
pBeta=pbeta(x,3,3)
cdf=rbind(MC,pBeta)
knitr::kable(cdf,col.names=x)
matplot(x,cbind(MC,pBeta),col=2:3,pch=1:2,xlim=c(0,1))
legend("topleft", inset=.05,legend=c("MC","pbeta"),col=2:3,pch=1:2)
myrRayleigh<-function(n,sigma,antithetic=TRUE){
u=runif(n/2)
if(!antithetic)
{v=runif(n/2)}
else
{v=1-u}
u=c(u,v)
x=sqrt(-2*sigma^2*log(1-u))
return(x)
}
n=1000
set.seed(12345)
MC1=myrRayleigh(n,2,antithetic = TRUE)
set.seed(12345)
MC2=myrRayleigh(n,2,antithetic = FALSE)
qqplot(MC1,MC2)
y=seq(0,10)
lines(y,y,col=6)
1-var(MC1)/var(MC2)
library(RANN)
library(boot)
library(energy)
library(Ball)
m <- 1e3; k<-3; p<-2; mu <- 0.5; su <- 0.75; set.seed(12345)
n1 <- n2 <- 50; R<-999; n <- n1+n2; N = c(n1,n2)
n3 <- 10; n4 <-100; M <- c(n3,n4)  #Unbalanced samples
Tn <- function(z, ix, sizes,k) {
n1 <- sizes[1]; n2 <- sizes[2]; n <- n1 + n2
if(is.vector(z)) z <- data.frame(z,0);
z <- z[ix, ];
NN <- nn2(data=z, k=k+1) # what's the first column?
block1 <- NN$nn.idx[1:n1,-1]
block2 <- NN$nn.idx[(n1+1):n,-1]
i1 <- sum(block1 < n1 + .5); i2 <- sum(block2 > n1+.5)
(i1 + i2) / (k * n)
}
eqdist.nn <- function(z,sizes,k){
boot.obj <- boot(data=z,statistic=Tn,R=R,
sim = "permutation", sizes = sizes,k=k)
ts <- c(boot.obj$t0,boot.obj$t)
p.value <- mean(ts>=ts[1])
list(statistic=ts[1],p.value=p.value)
}
#Unequal variances and equal expectations
p.values1 <- matrix(NA,m,3)
for(i in 1:m){
x <- matrix(rnorm(n1*p),ncol=p);
y <- cbind(rnorm(n2),rnorm(n2,sd=su));
z <- rbind(x,y)
p.values1[i,1] <- eqdist.nn(z,N,k)$p.value
p.values1[i,2] <- eqdist.etest(z,sizes=N,R=R)$p.value
p.values1[i,3] <- bd.test(x=x,y=y,R=999,seed=i*12345)$p.value
}
document()
library(StatComp18049)
help(package='StatComp18049')
document()
library(StatComp18049)
help(package='StatComp18049')
help(PSTR)
library("devtools")
document()
library(StatComp18049)
help(package='StatComp18049')
y<-generateBeta(1000,3,2)
y<-GenerateBeta(1000,3,2)
hist(y,prob = TRUE,ylim=c(0,2))
x <- seq(0, 1, .01)
lines(x, x^2*(1-x)^1/beta(3,2))
GEST(distribution='lognormal',m=1e3,n=1e3)
x1<-sample(1:10,1000,replace = T)
x2<-sample(10:20,1000,replace = T)
chisq.test(x1,x2)
library(microbenchmark)
ts <- microbenchmark(chisq=chisq.test(x1,x2),simple_chitest=simple_chitest(x1,x2))
ts <- microbenchmark(chisq=chisq.test(x1,x2),simple_chitest=SimpleChitest(x1,x2))
summary(ts)[,c(1,3,5,6)]
library(PSTR)
help(PSTR)
help(PSTR)
document()
library(StatComp18049)
help(package='StatComp18049')
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
install_github("zhengdat/StatComp18049")
install_github("zhengdat/StatComp18049")
build_vignettes()
document
document()
build_vignettes()
library("devtools")
document()
build_vignettes()
library(RANN)
library(boot)
library(energy)
library(Ball)
m <- 1e3; k<-3; p<-2; mu <- 0.5; su <- 0.75; set.seed(12345)
n1 <- n2 <- 50; R<-999; n <- n1+n2; N = c(n1,n2)
n3 <- 10; n4 <-100; M <- c(n3,n4)  #Unbalanced samples
Tn <- function(z, ix, sizes,k) {
n1 <- sizes[1]; n2 <- sizes[2]; n <- n1 + n2
if(is.vector(z)) z <- data.frame(z,0);
z <- z[ix, ];
NN <- nn2(data=z, k=k+1) # what's the first column?
block1 <- NN$nn.idx[1:n1,-1]
block2 <- NN$nn.idx[(n1+1):n,-1]
i1 <- sum(block1 < n1 + .5); i2 <- sum(block2 > n1+.5)
(i1 + i2) / (k * n)
}
eqdist.nn <- function(z,sizes,k){
boot.obj <- boot(data=z,statistic=Tn,R=R,
sim = "permutation", sizes = sizes,k=k)
ts <- c(boot.obj$t0,boot.obj$t)
p.value <- mean(ts>=ts[1])
list(statistic=ts[1],p.value=p.value)
}
#Unequal variances and equal expectations
p.values1 <- matrix(NA,m,3)
for(i in 1:m){
x <- matrix(rnorm(n1*p),ncol=p);
y <- cbind(rnorm(n2),rnorm(n2,sd=su));
z <- rbind(x,y)
p.values1[i,1] <- eqdist.nn(z,N,k)$p.value
p.values1[i,2] <- eqdist.etest(z,sizes=N,R=R)$p.value
p.values1[i,3] <- bd.test(x=x,y=y,R=999,seed=i*12345)$p.value
}
library(StatComp18049)
help('GenerateBeta')
build_vignettes()
build_vignettes()
build_vignettes()
document()
library(StatComp18049)
help(package='StatComp18049')
build_vignettes()
document()
build_vignettes()
install.packages('digest')
install.packages('digest')
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31,40)
opar <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
par(lwd=2, cex=1.5)
par(cex.axis=0.75, font.axis=3)
plot(dose, drugA, type="b", pch=19, lty=2, col="red")
plot(dose, drugA, type="b", pch=23, lty=6, col="blue", bg="green")
par(opar)
library('devtools')
build_vignettes()
devtools::build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
document()
library(StatComp18049)
help(package='StatComp18049')
install.packages('git')
install.packages('VisualSVN')
library(StatComp18049)
document()
library("devtools")
ducument()
document()
document()
